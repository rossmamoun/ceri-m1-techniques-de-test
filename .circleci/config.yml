version: 2.1

orbs:
  codecov: codecov/codecov@4.0.1  # Using Codecov orb for CircleCI

jobs:
  build-and-test:
    docker:
      - image: cimg/openjdk:11.0  # Java environment
    steps:
      - checkout  # Checkout the repository
      # Run Maven build and tests, including generating JaCoCo coverage report
      - run:
          name: Build with Tests
          command: mvn clean package
      # Generate coverage report using JaCoCo
      - run:
          name: Generate Coverage Report
          command: mvn test jacoco:report
      # Upload to Codecov
      - codecov/upload:
          file: target/site/jacoco/jacoco.xml  # This is where JaCoCo stores the coverage report

  checkstyle:
    docker:
      - image: cimg/openjdk:11.0  # Java environment
    steps:
      - checkout  # Checkout the repository
      # Run Checkstyle to analyze code quality
      - run:
          name: Run Checkstyle
          command: |
            mvn checkstyle:checkstyle
            if grep -q "<error " target/checkstyle-result.xml; then
              echo "Checkstyle Failed" > checkstyle-status.txt
            else
              echo "Checkstyle Passed" > checkstyle-status.txt
            fi
      - run:
          name: Generate Checkstyle Badge
          command: |
            CHECKSTYLE_STATUS=$(cat checkstyle-status.txt)
            if [ "$CHECKSTYLE_STATUS" = "Checkstyle Passed" ]; then
              curl -o checkstyle-badge.svg https://img.shields.io/badge/checkstyle-passed-brightgreen.svg
            else
              curl -o checkstyle-badge.svg https://img.shields.io/badge/checkstyle-failed-red.svg
            fi
      - store_artifacts:
          path: checkstyle-badge.svg  # Save the badge as an artifact

  deploy-javadoc:
    docker:
      - image: cimg/openjdk:11.0
    steps:
      - checkout
      - run:
          name: Generate Javadoc
          command: mvn javadoc:javadoc
      - run:
          name: Copy Javadoc to a Temporary Directory
          command: |
            mkdir -p javadoc-build
            cp -r target/site/apidocs/* javadoc-build/

      - run:
          name: Deploy to GitHub Pages
          command: |
            git config --global user.email "rossmamoun8@gmail.com"
            git config --global user.name "rossmamoun"

            git clone https://github.com/rossmamoun/ceri-m1-techniques-de-test.git temp-repo
            cd temp-repo

            if ! git ls-remote --exit-code origin gh-pages; then
              git checkout --orphan gh-pages
              rm -rf *
              echo "Initial gh-pages branch" > index.html
              git add index.html
              git commit -m "Create gh-pages branch"
              it push origin gh-pages
            fi
            cd ..
              if [ -d "gh-pages" ]; then
                rm -rf gh-pages
              fi
              git clone --branch gh-pages https://github.com/rossmamoun/ceri-m1-techniques-de-test.git gh-pages
              cd gh-pages
              rm -rf *
              cp -r ../javadoc-build/* .
              git add .
              git commit -m "Update Javadoc"
              git push origin gh-pages

workflows:
  sample:
    jobs:
      - build-and-test:
          filters:
            branches:
              ignore: gh-pages
      - checkstyle:
          requires:
            - build-and-test
          filters:
            branches:
              ignore: gh-pages
      - deploy-javadoc:
          requires:
            - build-and-test
          filters:
            branches:
              ignore: gh-pages